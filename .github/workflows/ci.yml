name: CI

on: push

env:
  DOWNLOAD_TOOL: curl -fLOSs --retry 2 --retry-delay 60

jobs:
  build:
    strategy:
      matrix:
        include:
          # Windows x86_64
          - triplet: x64-windows
            os: windows-latest
            os-name: Windows

          # macOS 10.13+ (Intel)
          #- triplet: x64-osx
          #  os: macos-11.0
          #  os-name: macOS

          # macOS 11.0+ (ARM64)
          #- triplet: arm64-osx
          #  os: macos-11.0
          #  os-name: macOS
    name: ${{ matrix.os-name }} (${{ matrix.triplet }})
    env:
      PACKAGES: qt5-base qt5-tools ffmpeg[x264,x265,modplug,vorbis,opus,webp,vpx,gpl,version3,mp3lame,theora] portaudio openimageio opencolorio opentimelineio
      DEPLOY_PACKAGES: qt5-base qt5-tools ffmpeg portaudio openimageio opencolorio opentimelineio
      VCPKG_DEFAULT_TRIPLET: ${{ matrix.triplet }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v3

      - name: Enable Developer Command Prompt (Windows)
        if: matrix.os == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Set up vcpkg
        uses: lukka/run-vcpkg@v7
        with:
          vcpkgGitCommitId: c168ce4e765409509c9c482faa0468c4e1ab386b
          setupOnly: true
          doNotCache: true

      - name: Set minimum deployment target
        if: matrix.triplet == 'x64-osx'
        run: |
          echo "set(VCPKG_OSX_DEPLOYMENT_TARGET 10.13)" >> $VCPKG_ROOT/triplets/x64-osx.cmake
          echo "set(VCPKG_C_FLAGS -mmacosx-version-min=10.13)" >> $VCPKG_ROOT/triplets/x64-osx.cmake
          echo "set(VCPKG_CXX_FLAGS -mmacosx-version-min=10.13)" >> $VCPKG_ROOT/triplets/x64-osx.cmake
          echo "CFLAGS=-mmacosx-version-min=10.13" >> $GITHUB_ENV
          echo "CXXFLAGS=-mmacosx-version-min=10.13" >> $GITHUB_ENV
          echo "LDFLAGS=-mmacosx-version-min=10.13" >> $GITHUB_ENV
          echo "MACOSX_DEPLOYMENT_TARGET=10.13" >> $GITHUB_ENV

      - name: Patches
        shell: bash
        run: |
          patch --forward "$VCPKG_ROOT/ports/x264/portfile.cmake" "$GITHUB_WORKSPACE/patches/x264-rename.patch" || true
          patch --forward "$VCPKG_ROOT/ports/ffnvcodec/portfile.cmake" "$GITHUB_WORKSPACE/patches/ffnvcodec-fix-pkgconfig-install.patch" || true
          patch --forward "$VCPKG_ROOT/scripts/cmake/vcpkg_build_qmake.cmake" "$GITHUB_WORKSPACE/patches/qmake-build.patch" || true
          patch --forward "$VCPKG_ROOT/ports/ffmpeg/portfile.cmake" "$GITHUB_WORKSPACE/patches/ffmpeg-remove-dodgy.patch" || true

      - name: Only build release
        env:
          TRIPLET: ${{ matrix.triplet }}
        shell: bash
        run: |
          echo "set(VCPKG_BUILD_TYPE release)" >> $VCPKG_ROOT/triplets/$TRIPLET.cmake

      - name: Install assemblers
        if: matrix.triplet == 'x64-osx'
        run: |
          brew install nasm yasm

      - name: Build from vcpkg
        shell: bash
        run: |
          $VCPKG_ROOT/vcpkg install --clean-after-build --overlay-ports $GITHUB_WORKSPACE/ports $PACKAGES

      - name: Deploy
        shell: bash
        working-directory: ${{ runner.workspace }}
        if: github.ref == 'refs/heads/master'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TRAVIS_REPO_SLUG: olive-editor/vcpkg-registry
          TRAVIS_COMMIT: ${{ github.sha }}
        run: |
          cd $VCPKG_ROOT
          vcpkg export $DEPLOY_PACKAGES --zip
          OUTPUT_FILE=olive-dep-$VCPKG_DEFAULT_TRIPLET.zip
          mv vcpkg-export-*.zip $OUTPUT_FILE
          $DOWNLOAD_TOOL https://github.com/probonopd/uploadtool/raw/master/upload.sh
          patch upload.sh "$GITHUB_WORKSPACE/patches/dont-use-data-binary.patch"
          chmod +x upload.sh
          ./upload.sh "$OUTPUT_FILE"
